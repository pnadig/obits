// Code generated by protoc-gen-go.
// source: notes_service.proto
// DO NOT EDIT!

/*
Package items is a generated protocol buffer package.

It is generated from these files:
	notes_service.proto

It has these top-level messages:
	Item
	Items
	Query
	SearchQuery
	Token
	User
*/
package items

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Link        string   `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	Title       string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Author      string   `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	Company     string   `protobuf:"bytes,5,opt,name=company" json:"company,omitempty"`
	Published   int64    `protobuf:"varint,6,opt,name=published" json:"published,omitempty"`
	Description string   `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	User        string   `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	CreatedAt   int64    `protobuf:"varint,10,opt,name=createdAt" json:"createdAt,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Item) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Item) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Item) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Item) GetPublished() int64 {
	if m != nil {
		return m.Published
	}
	return 0
}

func (m *Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Item) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Item) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Item) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type Items struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Items) Reset()                    { *m = Items{} }
func (m *Items) String() string            { return proto.CompactTextString(m) }
func (*Items) ProtoMessage()               {}
func (*Items) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Items) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type Query struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Item *Item  `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Query) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type SearchQuery struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *SearchQuery) Reset()                    { *m = SearchQuery{} }
func (m *SearchQuery) String() string            { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()               {}
func (*SearchQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type User struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Jwt  string `protobuf:"bytes,2,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func init() {
	proto.RegisterType((*Item)(nil), "items.Item")
	proto.RegisterType((*Items)(nil), "items.Items")
	proto.RegisterType((*Query)(nil), "items.Query")
	proto.RegisterType((*SearchQuery)(nil), "items.SearchQuery")
	proto.RegisterType((*Token)(nil), "items.Token")
	proto.RegisterType((*User)(nil), "items.User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ItemService service

type ItemServiceClient interface {
	AddItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Item, error)
	GetItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Item, error)
	GetItems(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Items, error)
	UpdateItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Item, error)
	DeleteItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*Items, error)
	VerifyOauth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*User, error)
	VerifyJwt(ctx context.Context, in *Token, opts ...grpc.CallOption) (*User, error)
}

type itemServiceClient struct {
	cc *grpc.ClientConn
}

func NewItemServiceClient(cc *grpc.ClientConn) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) AddItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := grpc.Invoke(ctx, "/items.ItemService/AddItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := grpc.Invoke(ctx, "/items.ItemService/GetItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItems(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := grpc.Invoke(ctx, "/items.ItemService/GetItems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) UpdateItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := grpc.Invoke(ctx, "/items.ItemService/UpdateItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) DeleteItem(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := grpc.Invoke(ctx, "/items.ItemService/DeleteItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := grpc.Invoke(ctx, "/items.ItemService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) VerifyOauth(ctx context.Context, in *Token, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/items.ItemService/VerifyOauth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) VerifyJwt(ctx context.Context, in *Token, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/items.ItemService/VerifyJwt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ItemService service

type ItemServiceServer interface {
	AddItem(context.Context, *Query) (*Item, error)
	GetItem(context.Context, *Query) (*Item, error)
	GetItems(context.Context, *Query) (*Items, error)
	UpdateItem(context.Context, *Query) (*Item, error)
	DeleteItem(context.Context, *Query) (*Query, error)
	Search(context.Context, *SearchQuery) (*Items, error)
	VerifyOauth(context.Context, *Token) (*User, error)
	VerifyJwt(context.Context, *Token) (*User, error)
}

func RegisterItemServiceServer(s *grpc.Server, srv ItemServiceServer) {
	s.RegisterService(&_ItemService_serviceDesc, srv)
}

func _ItemService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddItem(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItems(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).UpdateItem(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).DeleteItem(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Search(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_VerifyOauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).VerifyOauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/VerifyOauth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).VerifyOauth(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_VerifyJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).VerifyJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items.ItemService/VerifyJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).VerifyJwt(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "items.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _ItemService_AddItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _ItemService_GetItems_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemService_DeleteItem_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ItemService_Search_Handler,
		},
		{
			MethodName: "VerifyOauth",
			Handler:    _ItemService_VerifyOauth_Handler,
		},
		{
			MethodName: "VerifyJwt",
			Handler:    _ItemService_VerifyJwt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notes_service.proto",
}

func init() { proto.RegisterFile("notes_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x63, 0x3b, 0x69, 0xc6, 0x15, 0x42, 0x43, 0x85, 0x56, 0x08, 0x84, 0x31, 0x12, 0x0a,
	0x51, 0x95, 0x43, 0xb9, 0x70, 0xad, 0x84, 0x84, 0xe0, 0x82, 0x48, 0x29, 0x57, 0xe4, 0xda, 0x03,
	0x59, 0x9a, 0xd8, 0x66, 0x77, 0x43, 0x95, 0xdf, 0xe5, 0x2b, 0x38, 0xa2, 0x99, 0xdd, 0x06, 0xd3,
	0xa2, 0xe6, 0xf6, 0xde, 0x9b, 0xb7, 0xbb, 0x6f, 0xdf, 0xda, 0xf0, 0xa0, 0x69, 0x1d, 0xd9, 0x2f,
	0x96, 0xcc, 0x4f, 0x5d, 0xd1, 0xbc, 0x33, 0xad, 0x6b, 0x31, 0xd5, 0x8e, 0xd6, 0xb6, 0xf8, 0x1d,
	0x41, 0xf2, 0xce, 0xd1, 0x1a, 0xef, 0xc1, 0x50, 0xd7, 0x2a, 0xca, 0xa3, 0xe9, 0x64, 0x31, 0xd4,
	0x35, 0x22, 0x24, 0x2b, 0xdd, 0x5c, 0xaa, 0xa1, 0x28, 0x82, 0xf1, 0x08, 0x52, 0xa7, 0xdd, 0x8a,
	0x54, 0x2c, 0xa2, 0x27, 0xf8, 0x10, 0x46, 0xe5, 0xc6, 0x2d, 0x5b, 0xa3, 0x12, 0x91, 0x03, 0x43,
	0x05, 0xe3, 0xaa, 0x5d, 0x77, 0x65, 0xb3, 0x55, 0xa9, 0x0c, 0xae, 0x29, 0x3e, 0x86, 0x49, 0xb7,
	0xb9, 0x58, 0x69, 0xbb, 0xa4, 0x5a, 0x8d, 0xf2, 0x68, 0x1a, 0x2f, 0xfe, 0x0a, 0x98, 0x43, 0x56,
	0x93, 0xad, 0x8c, 0xee, 0x9c, 0x6e, 0x1b, 0x35, 0x96, 0xb5, 0x7d, 0x89, 0xb3, 0xb9, 0xf2, 0x9b,
	0x55, 0x07, 0x79, 0xcc, 0xd9, 0x18, 0xb3, 0xb6, 0xb1, 0x64, 0xd4, 0xc4, 0xe7, 0x65, 0xcc, 0xe7,
	0x54, 0x86, 0x4a, 0x47, 0xf5, 0xa9, 0x53, 0xe0, 0xcf, 0xd9, 0x09, 0xc5, 0x0c, 0x52, 0xbe, 0xb9,
	0xc5, 0x67, 0xe0, 0xcb, 0x50, 0x51, 0x1e, 0x4f, 0xb3, 0x93, 0x6c, 0x2e, 0x6c, 0xce, 0xc3, 0x45,
	0xa8, 0xe9, 0x35, 0xa4, 0x1f, 0x37, 0x64, 0xb6, 0xb7, 0x6a, 0x7a, 0x0a, 0x09, 0x3b, 0xa4, 0xa6,
	0x1b, 0x4b, 0x65, 0x50, 0x3c, 0x87, 0xec, 0x8c, 0x4a, 0x53, 0x2d, 0xfd, 0xfa, 0x23, 0x48, 0x7f,
	0x30, 0x08, 0x5b, 0x78, 0x52, 0x3c, 0x81, 0xf4, 0x53, 0x7b, 0x49, 0x8d, 0x34, 0xcc, 0xe0, 0x7a,
	0x2c, 0xa4, 0x38, 0x86, 0xe4, 0x9c, 0xef, 0x83, 0x90, 0x34, 0xe5, 0x9a, 0xc2, 0x50, 0x30, 0xde,
	0x87, 0xf8, 0xfb, 0x95, 0x0b, 0xcf, 0xc4, 0xf0, 0xe4, 0xd7, 0x10, 0x32, 0x0e, 0x70, 0xe6, 0xdf,
	0x1b, 0x5f, 0xc0, 0xf8, 0xb4, 0xae, 0xe5, 0x91, 0x0f, 0x43, 0x3e, 0xc9, 0xf2, 0xa8, 0x9f, 0xb6,
	0x18, 0xb0, 0xef, 0x2d, 0xb9, 0xfd, 0xbe, 0x29, 0x1c, 0x04, 0x9f, 0xbd, 0x61, 0x3c, 0xec, 0x19,
	0x6d, 0x31, 0xc0, 0x97, 0x00, 0xe7, 0x5d, 0x5d, 0x3a, 0xda, 0xbf, 0xe9, 0x0c, 0xe0, 0x0d, 0xad,
	0xe8, 0xbf, 0xd6, 0x7f, 0x58, 0x31, 0xc0, 0x63, 0x18, 0xf9, 0x4a, 0x11, 0xc3, 0xa4, 0xd7, 0xf0,
	0xad, 0x10, 0x33, 0xc8, 0x3e, 0x93, 0xd1, 0x5f, 0xb7, 0x1f, 0xf8, 0xbb, 0xdc, 0x6d, 0x2d, 0x7d,
	0xef, 0x52, 0x70, 0xbd, 0x72, 0xb5, 0x89, 0xf7, 0xbe, 0xbf, 0x72, 0x77, 0x3a, 0x2f, 0x46, 0xf2,
	0x17, 0xbd, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x44, 0xb1, 0x6b, 0x5c, 0x03, 0x00, 0x00,
}
